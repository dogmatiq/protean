// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.4
// source: github.com/dogmatiq/protean/internal/proteanpb/envelope.proto

package proteanpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ClientEnvelope is an envelope containing a data frame sent from the client to
// the server.
//
// The envelope & data frame format is intended to allow multiplexing multiple
// concurrent RPC invocations over a single data stream, such as a websocket
// connection.
//
// Each envelope includes a "call ID" which is used to correlate the data frame
// with a specific RPC invocation. Call IDs must be unique within a specific
// data stream (connection), and they must increase monotonically.
//
// A new RPC invocation is initiated when the client sends a "call" frame. The
// client generates a new call ID for each "call" frame. Envelopes from the
// server include the call ID to allow the frames to be correlated with a
// specific RPC call.
//
// Because Protocol Buffers services allow streaming RPC methods, calls can be
// long lived and involve multiple input and output messages. The call is
// completed only when the server sends either a "success" or "error" frame.
type ClientEnvelope struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// CallId identifies the RPC invocation that the frame relates to.
	CallId uint32 `protobuf:"varint,1,opt,name=call_id,json=callId,proto3" json:"call_id,omitempty"`
	// Types that are assignable to Frame:
	//	*ClientEnvelope_Call
	//	*ClientEnvelope_Send
	//	*ClientEnvelope_Close
	//	*ClientEnvelope_Cancel
	Frame isClientEnvelope_Frame `protobuf_oneof:"frame"`
}

func (x *ClientEnvelope) Reset() {
	*x = ClientEnvelope{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_dogmatiq_protean_internal_proteanpb_envelope_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientEnvelope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientEnvelope) ProtoMessage() {}

func (x *ClientEnvelope) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_dogmatiq_protean_internal_proteanpb_envelope_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientEnvelope.ProtoReflect.Descriptor instead.
func (*ClientEnvelope) Descriptor() ([]byte, []int) {
	return file_github_com_dogmatiq_protean_internal_proteanpb_envelope_proto_rawDescGZIP(), []int{0}
}

func (x *ClientEnvelope) GetCallId() uint32 {
	if x != nil {
		return x.CallId
	}
	return 0
}

func (m *ClientEnvelope) GetFrame() isClientEnvelope_Frame {
	if m != nil {
		return m.Frame
	}
	return nil
}

func (x *ClientEnvelope) GetCall() string {
	if x, ok := x.GetFrame().(*ClientEnvelope_Call); ok {
		return x.Call
	}
	return ""
}

func (x *ClientEnvelope) GetSend() *anypb.Any {
	if x, ok := x.GetFrame().(*ClientEnvelope_Send); ok {
		return x.Send
	}
	return nil
}

func (x *ClientEnvelope) GetClose() bool {
	if x, ok := x.GetFrame().(*ClientEnvelope_Close); ok {
		return x.Close
	}
	return false
}

func (x *ClientEnvelope) GetCancel() bool {
	if x, ok := x.GetFrame().(*ClientEnvelope_Cancel); ok {
		return x.Cancel
	}
	return false
}

type isClientEnvelope_Frame interface {
	isClientEnvelope_Frame()
}

type ClientEnvelope_Call struct {
	// Call is a frame that starts a new method call.
	//
	// Its value is the fully-qualified name of the RPC method to invoke in
	// the <package>/<service>/<method> format.
	Call string `protobuf:"bytes,2,opt,name=call,proto3,oneof"`
}

type ClientEnvelope_Send struct {
	// Send is a frame that sends an input message to the server.
	//
	// If the RPC method supports client-streaming the client MAY send any
	// number of input messages, including zero. Otherwise, it MUST send
	// exactly one.
	Send *anypb.Any `protobuf:"bytes,3,opt,name=send,proto3,oneof"`
}

type ClientEnvelope_Close struct {
	// Close is a frame that indicates to the server that no more input
	// messages will be sent for this call.
	//
	// A "close" frame with a value of false is a no-op and MUST be ignored
	// by the server.
	Close bool `protobuf:"varint,4,opt,name=close,proto3,oneof"`
}

type ClientEnvelope_Cancel struct {
	// Cancel is a frame that aborts execution of the RPC method.
	//
	// A "cancel" frame with a value of false is a no-op and MUST be ignored
	// by the server.
	Cancel bool `protobuf:"varint,5,opt,name=cancel,proto3,oneof"`
}

func (*ClientEnvelope_Call) isClientEnvelope_Frame() {}

func (*ClientEnvelope_Send) isClientEnvelope_Frame() {}

func (*ClientEnvelope_Close) isClientEnvelope_Frame() {}

func (*ClientEnvelope_Cancel) isClientEnvelope_Frame() {}

// ServerEnvelope is an envelope containing a data frame sent from the server to
// the client.
//
// See the documentation of ClientEnvelope for more information.
type ServerEnvelope struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// CallId identifies the RPC invocation that the frame relates to.
	CallId uint32 `protobuf:"varint,1,opt,name=call_id,json=callId,proto3" json:"call_id,omitempty"`
	// Types that are assignable to Frame:
	//	*ServerEnvelope_Output
	//	*ServerEnvelope_Close
	//	*ServerEnvelope_Success
	//	*ServerEnvelope_Error
	Frame isServerEnvelope_Frame `protobuf_oneof:"frame"`
}

func (x *ServerEnvelope) Reset() {
	*x = ServerEnvelope{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_dogmatiq_protean_internal_proteanpb_envelope_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerEnvelope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerEnvelope) ProtoMessage() {}

func (x *ServerEnvelope) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_dogmatiq_protean_internal_proteanpb_envelope_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerEnvelope.ProtoReflect.Descriptor instead.
func (*ServerEnvelope) Descriptor() ([]byte, []int) {
	return file_github_com_dogmatiq_protean_internal_proteanpb_envelope_proto_rawDescGZIP(), []int{1}
}

func (x *ServerEnvelope) GetCallId() uint32 {
	if x != nil {
		return x.CallId
	}
	return 0
}

func (m *ServerEnvelope) GetFrame() isServerEnvelope_Frame {
	if m != nil {
		return m.Frame
	}
	return nil
}

func (x *ServerEnvelope) GetOutput() *anypb.Any {
	if x, ok := x.GetFrame().(*ServerEnvelope_Output); ok {
		return x.Output
	}
	return nil
}

func (x *ServerEnvelope) GetClose() bool {
	if x, ok := x.GetFrame().(*ServerEnvelope_Close); ok {
		return x.Close
	}
	return false
}

func (x *ServerEnvelope) GetSuccess() bool {
	if x, ok := x.GetFrame().(*ServerEnvelope_Success); ok {
		return x.Success
	}
	return false
}

func (x *ServerEnvelope) GetError() *Error {
	if x, ok := x.GetFrame().(*ServerEnvelope_Error); ok {
		return x.Error
	}
	return nil
}

type isServerEnvelope_Frame interface {
	isServerEnvelope_Frame()
}

type ServerEnvelope_Output struct {
	// Send is a frame that sends an RPC output message to the client.
	//
	// If the RPC method supports server-streaming the server MAY send any
	// number of output messages, including zero.
	//
	// Otherwise, it MUST send exactly one output message, one "close" frame
	// and one "success" frame, or in the case of an error, a single "error"
	// frame.
	Output *anypb.Any `protobuf:"bytes,2,opt,name=output,proto3,oneof"`
}

type ServerEnvelope_Close struct {
	// Close is a frame that indicates to the client that no more output
	// messages will be sent for this call.
	//
	// This frame ONLY indicates the end of the stream of output frames. It
	// does NOT mean that the RPC method has finished executing.
	//
	// A "close" frame with a value of false is a no-op and MUST be ignored
	// by the client.
	Close bool `protobuf:"varint,3,opt,name=close,proto3,oneof"`
}

type ServerEnvelope_Success struct {
	// Success is a frame that indicates that the RPC method has returned
	// successfully (that is, without returning an error).
	//
	// A success frame with a value of false is a no-op and MUST be ignored
	// by the client.
	Success bool `protobuf:"varint,4,opt,name=success,proto3,oneof"`
}

type ServerEnvelope_Error struct {
	// Error is a frame that indicates that the RPC method has returned an
	// error.
	Error *Error `protobuf:"bytes,5,opt,name=error,proto3,oneof"`
}

func (*ServerEnvelope_Output) isServerEnvelope_Frame() {}

func (*ServerEnvelope_Close) isServerEnvelope_Frame() {}

func (*ServerEnvelope_Success) isServerEnvelope_Frame() {}

func (*ServerEnvelope_Error) isServerEnvelope_Frame() {}

var File_github_com_dogmatiq_protean_internal_proteanpb_envelope_proto protoreflect.FileDescriptor

var file_github_com_dogmatiq_protean_internal_proteanpb_envelope_proto_rawDesc = []byte{
	0x0a, 0x3d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x6f, 0x67,
	0x6d, 0x61, 0x74, 0x69, 0x71, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x61, 0x6e, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x61, 0x6e, 0x70, 0x62,
	0x2f, 0x65, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0a, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x61, 0x6e, 0x2e, 0x76, 0x31, 0x1a, 0x19, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x64, 0x6f, 0x67, 0x6d, 0x61, 0x74, 0x69, 0x71, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x65, 0x61, 0x6e, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x65, 0x61, 0x6e, 0x70, 0x62, 0x2f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xa6, 0x01, 0x0a, 0x0e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x76,
	0x65, 0x6c, 0x6f, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x63, 0x61, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x04, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04,
	0x63, 0x61, 0x6c, 0x6c, 0x12, 0x2a, 0x0a, 0x04, 0x73, 0x65, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x48, 0x00, 0x52, 0x04, 0x73, 0x65, 0x6e, 0x64,
	0x12, 0x16, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x00, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x06, 0x63, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x06, 0x63, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x42, 0x07, 0x0a, 0x05, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x22, 0xc1, 0x01, 0x0a, 0x0e,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x12, 0x17,
	0x0a, 0x07, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x63, 0x61, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x48, 0x00, 0x52,
	0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x12,
	0x1a, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x00, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x29, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x65, 0x61, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x07, 0x0a, 0x05, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x42,
	0x30, 0x5a, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x6f,
	0x67, 0x6d, 0x61, 0x74, 0x69, 0x71, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x61, 0x6e, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x61, 0x6e, 0x70,
	0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_github_com_dogmatiq_protean_internal_proteanpb_envelope_proto_rawDescOnce sync.Once
	file_github_com_dogmatiq_protean_internal_proteanpb_envelope_proto_rawDescData = file_github_com_dogmatiq_protean_internal_proteanpb_envelope_proto_rawDesc
)

func file_github_com_dogmatiq_protean_internal_proteanpb_envelope_proto_rawDescGZIP() []byte {
	file_github_com_dogmatiq_protean_internal_proteanpb_envelope_proto_rawDescOnce.Do(func() {
		file_github_com_dogmatiq_protean_internal_proteanpb_envelope_proto_rawDescData = protoimpl.X.CompressGZIP(file_github_com_dogmatiq_protean_internal_proteanpb_envelope_proto_rawDescData)
	})
	return file_github_com_dogmatiq_protean_internal_proteanpb_envelope_proto_rawDescData
}

var file_github_com_dogmatiq_protean_internal_proteanpb_envelope_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_github_com_dogmatiq_protean_internal_proteanpb_envelope_proto_goTypes = []interface{}{
	(*ClientEnvelope)(nil), // 0: protean.v1.ClientEnvelope
	(*ServerEnvelope)(nil), // 1: protean.v1.ServerEnvelope
	(*anypb.Any)(nil),      // 2: google.protobuf.Any
	(*Error)(nil),          // 3: protean.v1.Error
}
var file_github_com_dogmatiq_protean_internal_proteanpb_envelope_proto_depIdxs = []int32{
	2, // 0: protean.v1.ClientEnvelope.send:type_name -> google.protobuf.Any
	2, // 1: protean.v1.ServerEnvelope.output:type_name -> google.protobuf.Any
	3, // 2: protean.v1.ServerEnvelope.error:type_name -> protean.v1.Error
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_github_com_dogmatiq_protean_internal_proteanpb_envelope_proto_init() }
func file_github_com_dogmatiq_protean_internal_proteanpb_envelope_proto_init() {
	if File_github_com_dogmatiq_protean_internal_proteanpb_envelope_proto != nil {
		return
	}
	file_github_com_dogmatiq_protean_internal_proteanpb_error_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_github_com_dogmatiq_protean_internal_proteanpb_envelope_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientEnvelope); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_dogmatiq_protean_internal_proteanpb_envelope_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerEnvelope); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_github_com_dogmatiq_protean_internal_proteanpb_envelope_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*ClientEnvelope_Call)(nil),
		(*ClientEnvelope_Send)(nil),
		(*ClientEnvelope_Close)(nil),
		(*ClientEnvelope_Cancel)(nil),
	}
	file_github_com_dogmatiq_protean_internal_proteanpb_envelope_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*ServerEnvelope_Output)(nil),
		(*ServerEnvelope_Close)(nil),
		(*ServerEnvelope_Success)(nil),
		(*ServerEnvelope_Error)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_github_com_dogmatiq_protean_internal_proteanpb_envelope_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_github_com_dogmatiq_protean_internal_proteanpb_envelope_proto_goTypes,
		DependencyIndexes: file_github_com_dogmatiq_protean_internal_proteanpb_envelope_proto_depIdxs,
		MessageInfos:      file_github_com_dogmatiq_protean_internal_proteanpb_envelope_proto_msgTypes,
	}.Build()
	File_github_com_dogmatiq_protean_internal_proteanpb_envelope_proto = out.File
	file_github_com_dogmatiq_protean_internal_proteanpb_envelope_proto_rawDesc = nil
	file_github_com_dogmatiq_protean_internal_proteanpb_envelope_proto_goTypes = nil
	file_github_com_dogmatiq_protean_internal_proteanpb_envelope_proto_depIdxs = nil
}
