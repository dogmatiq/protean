syntax = "proto3";
package protean.v1.websocket;

option go_package = "github.com/dogmatiq/protean/internal/proteanpb";

import "google/protobuf/any.proto";
import "github.com/dogmatiq/protean/internal/proteanpb/error.proto";

// ClientEnvelope is an envelope containing a websocket frame sent from the
// client to the server.
//
// Each frame is sent over a virtual "channel", identified by an unsigned 32-bit
// integer that is generated by the client. Zero is a valid channel.
//
// Each channel handles the communication for a single RPC method invocation.
//
// A new channel is opened when the client sends a "call" frame inside an
// envelope with a channel that is not already open. The server will send its
// responses to this call using the same channel number.
//
// A channel is closed when the server sends either an "success" or "error"
// frame. Once closed, the channel may be reused for a new RPC invocation. 
message ClientEnvelope {
    // Channel is the channel on which the frame is being sent.
    uint32 channel = 1;

    oneof frame {
        // Call is a frame that starts a new method call. 
        //
        // Its string value is the fully-qualified name of the RPC method to
        // invoke.
        //
        // It follows the <package>/<service>/<method> format, for example,
        // "protean.test/TestService/Unary".
        string call = 2;

        // Input is a frame that contains an input message for the RPC method
        // invoked on this channel.
        //
        // If the RPC method supports client-streaming the client MAY send any
        // number of input frames, including zero. Otherwise, it MUST send
        // exactly one.
        google.protobuf.Any input = 3;

        // Done is a frame that indicates that no more input frames will be
        // provided for this RPC invocation.
        //
        // A done frame with a value of false is a no-op and MUST be ignored by
        // the server.
        bool done = 4;

        // Cancel is a frame that aborts execution of the RPC method.
        //
        // A cancel frame with a value of false is a no-op and MUST be ignored
        // by the server.
        bool cancel = 5;
    }
}

// ServerEnvelope is an envelope containing a websocket frame sent from the
// server to the client.
message ServerEnvelope {
    // Channel is the channel on which the frame is being sent.
    uint32 channel = 1;

    oneof frame {
        // Output is a frame that contains an RPC output message produced by the
        // RPC method invoked on this channel.
        //
        // If the RPC method supports server-streaming the server MAY send any
        // number of output frames, including zero. 
        //
        // Otherwise, it MUST send exactly one output frame, one done frame and
        // one success frame, or in the case of an error, a single error frame.
        google.protobuf.Any output = 2;

        // Done is a frame that indicates that no more output frames will be
        // sent by the server in response to this RPC invocation.
        //
        // This frame ONLY indicates the end of the stream of output frames. It
        // does not imply that the RPC method has finished executing.
        // Importantly, the channel is not yet freed for reuse, nor is there any
        // guarantee that the RPC method will finish successfully.
        //
        // A done frame with a value of false is a no-op and MUST be ignored by
        // the client. Browser-based clients MAY ignore this frame entirely and
        // instead wait only for receipt of a "success" or "error" frame.
        bool done = 3;

        // Success is a frame that indicates that the RPC method has returned
        // successfully.
        //
        // A success frame with a value of false is a no-op and MUST be ignored
        // by the client.
        //
        // The channel is closed freeing its ID for reuse.
        bool success = 4;

        // Error is a frame that indicates that the RPC method has returned an
        // error.
        //
        // The channel is closed, freeing its ID for reuse.
        Error error = 5;
    }
}
