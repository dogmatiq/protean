package generator

import (
	"fmt"
	"path"
	"strings"

	"github.com/dave/jennifer/jen"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/descriptorpb"
	"google.golang.org/protobuf/types/pluginpb"
)

// Generator produces a code generation response from a request.
type Generator struct {
	Version string
}

// Generate produces a code generation response for the given request.
func (g *Generator) Generate(req *pluginpb.CodeGeneratorRequest) (*pluginpb.CodeGeneratorResponse, error) {
	params, err := parseParameters(req.GetParameter())
	if err != nil {
		return nil, err
	}

	protocVersion := formatProtocVersion(req)
	res := &pluginpb.CodeGeneratorResponse{}

	for _, n := range req.GetFileToGenerate() {
		for _, f := range req.GetProtoFile() {
			if f.GetName() == n {
				fres, ok, err := g.generateFile(
					req,
					f,
					params,
					protocVersion,
				)
				if err != nil {
					return nil, fmt.Errorf("%s: %w", f.GetName(), err)
				}

				if ok {
					res.File = append(res.File, fres)
				}
			}
		}
	}

	return res, nil
}

// generateFile generates a Go file for the given input protobuffers file.
func (g *Generator) generateFile(
	req *pluginpb.CodeGeneratorRequest,
	f *descriptorpb.FileDescriptorProto,
	params parameters,
	protocVersion string,
) (*pluginpb.CodeGeneratorResponse_File, bool, error) {
	services := f.GetService()
	if len(services) == 0 {
		return nil, false, nil
	}

	pkgPath, pkgName, err := goPackage(f)
	if err != nil {
		return nil, false, err
	}

	out := jen.NewFilePathName(pkgPath, pkgName)

	header := "// Code generated by protoc-gen-go-harpy. DO NOT EDIT.\n"
	header += "// versions:\n"
	header += fmt.Sprintf("// 	protoc-gen-go v%s\n", g.Version)
	header += fmt.Sprintf("// 	protoc        v%s\n", protocVersion)
	header += fmt.Sprintf("// source: %s\n", f.GetName())
	out.HeaderComment(header)

	for _, s := range services {
		if err := g.generateServerInterface(
			out,
			req,
			f,
			s,
		); err != nil {
			return nil, false, err
		}
	}

	var w strings.Builder
	if err := out.Render(&w); err != nil {
		return nil, false, err
	}

	return &pluginpb.CodeGeneratorResponse_File{
		Name:    proto.String(outputFileName(params, f)),
		Content: proto.String(w.String()),
	}, true, nil
}

// outputFileName returns the name of the file to be generated from the given
// input file.
func outputFileName(params parameters, desc *descriptorpb.FileDescriptorProto) string {
	n := strings.TrimPrefix(desc.GetName(), params.Module)

	if ext := path.Ext(n); ext == ".proto" || ext == ".protodevel" {
		n = strings.TrimSuffix(n, ext)
	}

	return n + "_harpy.pb.go"
}

// formatProtocVersion formats the protoc version provided in the request for
// use in a file header.
func formatProtocVersion(req *pluginpb.CodeGeneratorRequest) string {
	v := req.GetCompilerVersion()

	s := fmt.Sprintf(
		"%d.%d.%d",
		v.GetMajor(),
		v.GetMinor(),
		v.GetPatch(),
	)

	if suffix := v.GetSuffix(); suffix != "" {
		s += "-" + suffix
	}

	return s
}

// goPackage parses the "go_package" option in the given file and returns
// the import path and unqualified package name.
func goPackage(f *descriptorpb.FileDescriptorProto) (string, string, error) {
	pkg := f.GetOptions().GetGoPackage()
	if pkg == "" {
		return "", "", fmt.Errorf("no 'go_package' option was specified in %s", f.GetName())
	}

	// If a semi-colon is present, the part after the semi-colon is the actual
	// package name. Used when the import path and package name differ.
	//
	// Use of this option is discouraged. See
	// https://developers.google.com/protocol-buffers/docs/reference/go-generated
	if i := strings.Index(pkg, ";"); i != -1 {
		return pkg[:i], pkg[i+1:], nil
	}

	return pkg, path.Base(pkg), nil
}

// goType returns the package path and type name for the Go type that represents
// the given protocol buffers type.
func goType(
	req *pluginpb.CodeGeneratorRequest,
	protoName string,
) (string, string, error) {
	f, t := findDescriptor(req, protoName)

	pkgPath, _, err := goPackage(f)
	if err != nil {
		return "", "", err
	}

	return pkgPath, camelCase(t.GetName()), nil
}

// findDescriptor returns the descriptor for the given protocol buffers type.
func findDescriptor(
	req *pluginpb.CodeGeneratorRequest,
	protoName string,
) (*descriptorpb.FileDescriptorProto, *descriptorpb.DescriptorProto) {
	i := strings.LastIndexByte(protoName, '.')
	pkg := protoName[1:i] // also trim leading .
	name := protoName[i+1:]

	for _, f := range req.GetProtoFile() {
		if f.GetPackage() != pkg {
			continue
		}

		for _, m := range f.GetMessageType() {
			if m.GetName() == name {
				return f, m
			}
		}
	}

	panic(fmt.Sprintf("no definition for type: %s", protoName))
}
